#ifndef _NET_SERVER_H_
#define _NET_SERVER_H_

#ifdef	__cplusplus
#if		__cplusplus
extern "C" {
#endif
#endif
/*
 ************************************************************************************************************************************************************************
 ************************************************************************************************************************************************************************
 *			程序模块声明
 *
 *			文件:		NetServer.h
 *			版本:		1.0
 *			作者:		LJJ
 *			日期:		2006/10/08
 *
 *			
 *
 ************************************************************************************************************************************************************************
 ************************************************************************************************************************************************************************
*/




/*
 ************************************************************************************************************************************************************************
 * 程序模块功能描述
 *
 *
 ************************************************************************************************************************************************************************
*/




/*
 ************************************************************************************************************************************************************************
 * 版本 1.0   2006/10/08
 * 初始化版本 
 ************************************************************************************************************************************************************************
*/




/*
 ************************************************************************************************************************************************************************
 * 引用文件
 ************************************************************************************************************************************************************************
*/

#include "Common.h"
#include <net/if.h>


/*
 ************************************************************************************************************************************************************************
 * 常数与宏定义
 ************************************************************************************************************************************************************************
*/

#define ETH_HW_ADDR_SIZE						IFHWADDRLEN
#define ETH_IF_NAME_SIZE						IFNAMSIZ
#define ETH_SECOND_IF_DEFAULT_NAME				"eth1"

#define	SOCKET_TYPE_TCP							1
#define	SOCKET_TYPE_UDP							2
	
#define	SOCKET_TCP_MODE_SERVER					1
#define	SOCKET_TCP_MODE_CLIENT					2

#define	SOCKET_UDP_MODE_COMM					1
#define	SOCKET_UDP_MODE_MCAST					2
#define	SOCKET_UDP_MODE_BCAST					3
#define	SOCKET_UDP_MODE_USER_MCAST				4	

#define	SOCKET_INVALID_FD						(-1)
#define	SOCKET_UDP_MAX_LEN						0x10000

#define	SOCKETINIT_MCASTGROUP_BASE				225
#define DEV_NET_ID_TO_AUTO_MCASTGROUP(ID)		(((ID)&0x00FFFFFF)|(SOCKETINIT_MCASTGROUP_BASE<<24))
#define DEV_ETH_ADDR_TO_DEV_NET_ID(EthAddr)		((DWORD)(((EthAddr)[3]<<16)|((EthAddr)[4]<<8)|((EthAddr)[5])))			

#define ICMP_DEFAULT_TTL				128
#define ICMP_PING_DEFAULT_INTERVAL		1000
#define ICMP_PING_DEFAULT_TIMEOUT		ICMP_PING_DEFAULT_INTERVAL


/*
 ************************************************************************************************************************************************************************
 * 数据类型定义
 ************************************************************************************************************************************************************************
*/

typedef struct tSYS_NET_IF_CONFIG
{
	BOOL	bIsSetIfHwAddr;
	BOOL	bIsPPP_If;
	BOOL	bIsSetPPP_Gateway;
	BOOL	bIsForceSet;
	BOOL	bIsEnableSetSwitchMode;
	BOOL	bIsSwitchMode;
	BOOL	bIsSwitchMaster;
	BOOL	bIsIgnoreGateway;
	BOOL	bIsIgnoreProtocolAddr;
	DWORD	dwInetProtocolAddr;
	DWORD	dwSubNetMask;
	DWORD	dwDefaultGateway;
	DWORD	dwRemoteAddr;
	BYTE	IfHardwareAddr[ETH_HW_ADDR_SIZE];
	char	strIfDevName[ETH_IF_NAME_SIZE];
}SYS_NET_IF_CONFIG,*PSYS_NET_IF_CONFIG;

typedef struct tSYS_NET_IF_RUN_STATUS
{
	DWORD	RxPackets;
	DWORD	TxPackets;
	DWORD	RxErrors;
	DWORD	TxErrors;
	DWORD	RxDropped;
	DWORD	TxDropped;
	DWORD	RxMulticast;
	DWORD	Collisions;
	DWORD	RxOverErrs;
	DWORD	RxCrcErrs;
	U64		RxBytes;
	U64		TxBytes;
}SYS_NET_IF_RUN_STATUS,*PSYS_NET_IF_RUN_STATUS;

typedef void (*PLOCAL_TIME_SET_FUNC)(DWORD dwGmtTime);
typedef void (*PZFY_NET_SAFE_REBOOT)(void);


/*
 ************************************************************************************************************************************************************************
 * 函数原型声明
 ************************************************************************************************************************************************************************
*/


#define NetServerConfig					ZFY_NET_NetServerConfig
#define NetServerStatus					ZFY_NET_NetServerStatus
#define NetServerGetRunStatus			ZFY_NET_NetServerGetRunStatus
#define CreateAsyncStreamSocketConnect	ZFY_NET_CreateAsyncStreamSocketConnect
#define WaitForAsyncSocketConnectReady	ZFY_NET_WaitForAsyncSocketConnectReady
#define CreateSocket					ZFY_NET_CreateSocket
#define CreateSocketEx					ZFY_NET_CreateSocketEx
#define KillSocketEx					ZFY_NET_KillSocketEx
#define KillSocket						ZFY_NET_KillSocket
#define AcceptSocket					ZFY_NET_AcceptSocket
#define WaitForSocketEx					ZFY_NET_WaitForSocketEx
#define WaitForSocket					ZFY_NET_WaitForSocket
#define SendStream						ZFY_NET_SendStream
#define RecvStream						ZFY_NET_RecvStream
#define SendUdp							ZFY_NET_SendUdp
#define SendUdpTo						ZFY_NET_SendUdpTo
#define RecvUdp							ZFY_NET_RecvUdp
#define RecvUdpFrom						ZFY_NET_RecvUdpFrom
#define IcmpPing						ZFY_NET_IcmpPing
#define SntpStart						ZFY_NET_SntpStart
#define SntpStop						ZFY_NET_SntpStop

#define ZFY_NetServerConfig						ZFY_NET_NetServerConfig
#define ZFY_NetServerStatus						ZFY_NET_NetServerStatus
#define ZFY_NetServerGetRunStatus				ZFY_NET_NetServerGetRunStatus
#define ZFY_CreateAsyncStreamSocketConnect		ZFY_NET_CreateAsyncStreamSocketConnect
#define ZFY_WaitForAsyncSocketConnectReady		ZFY_NET_WaitForAsyncSocketConnectReady
#define ZFY_CreateSocket						ZFY_NET_CreateSocket
#define ZFY_CreateSocketEx						ZFY_NET_CreateSocketEx
#define ZFY_KillSocketEx						ZFY_NET_KillSocketEx
#define ZFY_KillSocket							ZFY_NET_KillSocket
#define ZFY_AcceptSocket						ZFY_NET_AcceptSocket
#define ZFY_WaitForSocketEx						ZFY_NET_WaitForSocketEx
#define ZFY_WaitForSocket						ZFY_NET_WaitForSocket
#define ZFY_SendStream							ZFY_NET_SendStream
#define ZFY_RecvStream							ZFY_NET_RecvStream
#define ZFY_SendUdp								ZFY_NET_SendUdp
#define ZFY_SendUdpTo							ZFY_NET_SendUdpTo
#define ZFY_RecvUdp								ZFY_NET_RecvUdp
#define ZFY_RecvUdpFrom							ZFY_NET_RecvUdpFrom
#define ZFY_IcmpPing							ZFY_NET_IcmpPing
#define ZFY_SntpStart							ZFY_NET_SntpStart
#define ZFY_SntpStop							ZFY_NET_SntpStop


/*
 ************************************************************************************************************************************************************************     
 *函数名称: ZFY_NET_NetServerSetSafeRebootCallback
 *功能描述: 设置网络服务模块安全复位重启回调函数
 *输入描述: 安全复位重启回调函数
 *输出描述: 无
 *返回描述: 无
 *作者日期: ZCQ/2013/01/22
 *全局声明: sPtrNetServerSafeReboot，sNetServerMutex
 *特殊说明: 安全复位重启回调函数默认空；回调函数为空执行系统重启复位函数热启动
 ************************************************************************************************************************************************************************       
 */
extern void ZFY_NET_NetServerSetSafeRebootCallback(PZFY_NET_SAFE_REBOOT pCallbackFunc);

/*
 ************************************************************************************************************************************************************************     
 *函数名称:	ZFY_NET_NetServerConfig,ZFY_NET_NetServerConfigEx
 *功能描述: 系统网络服务基本参数配置
 *输入描述: 系统网络接口模式、网络服务基本配置参数、第二ETH接口网关标志
 *输出描述: 无
 *返回描述: 成功(TRUE)/失败(FALSE)
 *作者日期: ZCQ/2013/02/05
 *全局声明: 无
 *特殊说明: 当输入接口设备名空则默认缺省设备，支持非本地子网默认网关
 ************************************************************************************************************************************************************************       
 */
extern BOOL ZFY_NET_NetServerConfig(DWORD dwNetIfMode,const PSYS_NET_IF_CONFIG pConfig,BOOL IsBindGatewayToSecondEth);

/*
 ************************************************************************************************************************************************************************     
 *函数名称:	ZFY_NET_NetServerStatus
 *功能描述: 系统网络服务基本参数配置
 *输入描述: 输入接口设备名和接口硬件地址查询标记
 *输出描述: 网络服务基本配置参数
 *返回描述: 成功(TRUE)/失败(FALSE)
 *作者日期: ZCQ/2007/02/13
 *全局声明: 无
 *特殊说明: 当输入接口设备名空则默认缺省设备
 ************************************************************************************************************************************************************************       
 */
extern BOOL ZFY_NET_NetServerStatus(PSYS_NET_IF_CONFIG pConfig);

/*
 ************************************************************************************************************************************************************************     
 *函数名称: ZFY_NET_NetServerGetRunStatus
 *功能描述: 获取网络接口设备当前运行状态
 *输入描述: 系统网络接口模式、接口设备名
 *输出描述: 接口设备当前运行状态
 *返回描述: 成功(TRUE)/失败(FALSE)
 *作者日期: ZCQ/2013/02/04
 *全局声明: 无
 *特殊说明: 当输入接口设备名空则默认缺省设备,缺省设备依据当前系统网络接口模式确定
 ************************************************************************************************************************************************************************       
 */
extern BOOL ZFY_NET_NetServerGetRunStatus(DWORD dwNetIfMode,const char *pIfName,PSYS_NET_IF_RUN_STATUS pStatus);

/*
 ************************************************************************************************************************************************************************     
 *函数名称: ZFY_NET_CreateAsyncStreamSocketConnect
 *功能描述: 创建本地客户到远程服务器的异步连接
 *输入描述: 远程地址
 *输出描述: NONE
 *返回描述: 网络接口标识
 *作者日期: ZCQ/2009/04/23
 *全局声明: NONE
 *特殊说明: 必须等待连接就绪后才可以正常工作
 ************************************************************************************************************************************************************************       
 */
extern int ZFY_NET_CreateAsyncStreamSocketConnect(struct sockaddr_in *pRemoteAddr);

/*
 ************************************************************************************************************************************************************************     
 *函数名称: ZFY_NET_WaitForAsyncSocketConnectReady
 *功能描述: 等待本地客户到远程服务器的异步连接就绪
 *输入描述: 网络接口、等待超时时间
 *输出描述: 等待超时标记、可选本地地址
 *返回描述: 成功(True)/失败(False)
 *作者日期: ZCQ/2009/04/23
 *全局声明: NONE
 *特殊说明: 若成功返回则输出等待超时标记有效,若pLocalAddr为NULL则忽略本地地址;
 ************************************************************************************************************************************************************************       
 */
extern Boolean	ZFY_NET_WaitForAsyncSocketConnectReady(int Fd,U32 TimeoutMS,Boolean *pIsReady,struct sockaddr_in *pLocalAddr);

/*
 ************************************************************************************************************************************************************************     
 *函数名称: ZFY_NET_CreateSocket
 *功能描述: 创建并初始化网络接口
 *输入描述: 接口类型、初始化模式、本地地址、远程地址、多播组标识(设备网络标识)
 *输出描述: 根据接口类型和初始化模式可选输出本地地址、远程地址
 *返回描述: 网络接口标识
 *作者日期: ZCQ/2008/01/28
 *全局声明: 无
 *特殊说明: 客户模式必须提供远程地址，可选本地地址用于接收自动邦定的本地地址;服务器模式必须提供本地地址，远程地址忽略;
 *			UDP类型若用于接收必须提供本地地址,当只用作发送且省略本地地址时系统自动邦定;
 *			UDP类型可选远程地址单播作为输入参数提供本地连接绑定，多播与广播则作为可选输出参数接受相应默认地址;
 *			多播组标识仅仅多播有效，用户多播完全有效；自动多播低24位有效(系统通讯协议默认取以太设备48位物理地址低24位),高8位固定为默认值;
 ************************************************************************************************************************************************************************       
 */
extern int	ZFY_NET_CreateSocket(int Type,int Mode,struct sockaddr_in *pLocalAddr,struct sockaddr_in *pRemoteAddr,U32 DevNetID);

/*
 ************************************************************************************************************************************************************************     
 *函数名称: ZFY_NET_CreateSocketEx
 *功能描述: 创建并初始化网络接口
 *输入描述: 接口类型、初始化模式、本地地址、远程地址、多播组标识(设备网络标识)、连接超时时间(ms)
 *输出描述: 根据接口类型和初始化模式可选输出本地地址、远程地址
 *返回描述: 网络接口标识
 *作者日期: ZCQ/2008/01/28
 *全局声明: 无
 *特殊说明: 客户模式必须提供远程地址，可选本地地址用于接收自动邦定的本地地址;服务器模式必须提供本地地址，远程地址忽略;
 *			UDP类型若用于接收必须提供本地地址,当只用作发送且省略本地地址时系统自动邦定;
 *			UDP类型可选远程地址单播作为输入参数提供本地连接绑定，多播与广播则作为可选输出参数接受相应默认地址;
 *			多播组标识仅仅多播有效，用户多播完全有效；自动多播低24位有效(系统通讯协议默认取以太设备48位物理地址低24位),高8位固定为默认值;
 ************************************************************************************************************************************************************************       
 */
extern int	ZFY_NET_CreateSocketEx(int Type,int Mode,struct sockaddr_in *pLocalAddr,struct sockaddr_in *pRemoteAddr,U32 DevNetID,U32 ConnectTimeoutMS);

/*
 ************************************************************************************************************************************************************************     
 *函数名称: ZFY_NET_KillSocketEx,ZFY_NET_KillSocket
 *功能描述: 关闭网络接口
 *输入描述: 网络接口标识指针、组播地址
 *输出描述: 清除网络接口标识
 *返回描述: 无
 *作者日期: ZCQ/2007/01/24
 *全局声明: 无
 *特殊说明: 无
 ************************************************************************************************************************************************************************       
 */
extern void ZFY_NET_KillSocketEx(int *pFd,U32 GroupAddr);
extern void ZFY_NET_KillSocket(int *pFd);

/*
 ************************************************************************************************************************************************************************     
 *函数名称: ZFY_NET_AcceptSocket
 *功能描述: 从本地服务器端口接收远程客户的连接
 *输入描述: 服务器网络接口指针、服务器网络接口本地地址
 *输出描述: 服务器网络接口、可选本地地址、可选远程地址
 *返回描述: 网络接口标识
 *作者日期: ZCQ/2007/01/24
 *全局声明: 无
 *特殊说明: 若pLocalAddr为NULL则忽略本地地址;若pRemoteAddr为NULL则忽略远程地址;
 ************************************************************************************************************************************************************************       
 */
extern int	ZFY_NET_AcceptSocket(int *pServerFd,const struct sockaddr_in *pServerLocalAddr,struct sockaddr_in *pLocalAddr,struct sockaddr_in *pRemoteAddr);

/*
 ************************************************************************************************************************************************************************     
 *函数名称: ZFY_NET_WaitForSocketEx,ZFY_NET_WaitForSocket
 *功能描述: 等待网络接口就绪
 *输入描述: 最大网络接口标识、网络接口标识读写和异常集合、等待超时(ms)
 *输出描述: 就绪网络接口数
 *返回描述: 成功(True)/失败(False)
 *作者日期: ZCQ/2007/01/24
 *全局声明: 无
 *特殊说明: 若超时为零则立即返回;若pTimeOut为NULL则不确定阻塞;
 ************************************************************************************************************************************************************************       
 */
extern Boolean	ZFY_NET_WaitForSocketEx(int MaxFd,fd_set *pRset,fd_set *pWset,fd_set *pEset,const U32 *pTimeOut,int *pFdNum);
extern Boolean	ZFY_NET_WaitForSocket(int MaxFd,fd_set *pRset,fd_set *pWset,const U32 *pTimeOut,int *pFdNum);

/*
 ************************************************************************************************************************************************************************     
 *函数名称: ZFY_NET_SendStream
 *功能描述: 网络流发送
 *输入描述: 网络流接口标识、发送缓冲区及其长度
 *输出描述: 无
 *返回描述: 成功(True)/失败(False)
 *作者日期: ZCQ/2007/01/24
 *全局声明: 无
 *特殊说明: 无
 ************************************************************************************************************************************************************************       
 */
extern Boolean	ZFY_NET_SendStream(int Fd,const void *Buf,U32 Len);

/*
 ************************************************************************************************************************************************************************     
 *函数名称: ZFY_NET_RecvStream
 *功能描述: 网络流接收
 *输入描述: 网络流接口标识、接收缓冲区及其长度
 *输出描述: 无
 *返回描述: 成功(True)/失败(False)
 *作者日期: ZCQ/2007/01/24
 *全局声明: 无
 *特殊说明: 无
 ************************************************************************************************************************************************************************       
 */
extern Boolean	ZFY_NET_RecvStream(int Fd,void *Buf,U32 Len);

/*
 ************************************************************************************************************************************************************************     
 *函数名称: ZFY_NET_SendUdp
 *功能描述: 网络用户报文点对点发送
 *输入描述: 网络用户报文接口标识、发送缓冲区及其长度
 *输出描述: 无
 *返回描述: 成功(True)/失败(False)
 *作者日期: ZCQ/2007/01/24
 *全局声明: 无
 *特殊说明: 网络用户报文接口标识必须已经与远程主机建立连接
 ************************************************************************************************************************************************************************       
 */
extern Boolean	ZFY_NET_SendUdp(int Fd,const void *Buf,U32 Len);

/*
 ************************************************************************************************************************************************************************     
 *函数名称: ZFY_NET_SendUdpTo
 *功能描述: 网络用户报文点对多发送
 *输入描述: 网络用户报文接口标识、发送缓冲区及其长度、目标远程地址
 *输出描述: 无
 *返回描述: 成功(True)/失败(False)
 *作者日期: ZCQ/2007/01/24
 *全局声明: 无
 *特殊说明: 必须指定目标远程地址(包含多播地址与广播地址),若未绑定本地地址，则系统临时动态自动分配
 ************************************************************************************************************************************************************************       
 */
extern Boolean	ZFY_NET_SendUdpTo(int Fd,const void *Buf,U32 Len,const struct sockaddr_in *pRemoteAddr);

/*
 ************************************************************************************************************************************************************************     
 *函数名称: ZFY_NET_RecvUdp
 *功能描述: 网络用户报文点对点接收
 *输入描述: 网络用户报文接口标识、接收缓冲区及其长度
 *输出描述: 实际接收字节数
 *返回描述: 成功(True)/失败(False)
 *作者日期: ZCQ/2009/04/23
 *全局声明: 无
 *特殊说明: 网络用户报文接口标识必须已经与远程主机建立连接
 ************************************************************************************************************************************************************************       
 */
extern Boolean	ZFY_NET_RecvUdp(int Fd,void *Buf,U32 *Len);

/*
 ************************************************************************************************************************************************************************     
 *函数名称: ZFY_NET_RecvUdpFrom
 *功能描述: 网络用户报文多点接收
 *输入描述: 网络用户报文接口标识、接收缓冲区及其长度、可选远程过滤地址
 *输出描述: 实际接收字节数、根据远程过滤地址输出过滤结果(可选)
 *返回描述: 成功(True)/失败(False)
 *作者日期: ZCQ/2009/04/23
 *全局声明: 无
 *特殊说明: 若pRemoteAddr为NULL则忽略;若远程地址为零则直接输出实际远程地址,若远程端口为零则忽略端口过滤;pRemoteAddr与pConflict必须同时为NULL或同时非NULL
 ************************************************************************************************************************************************************************       
 */
extern Boolean	ZFY_NET_RecvUdpFrom(int Fd,void *Buf,U32 *Len,struct sockaddr_in *pRemoteAddr,Boolean *pConflict);

/*
 ************************************************************************************************************************************************************************     
 *函数名称: ZFY_NET_IcmpPing
 *功能描述: 验证目标主机的连通存活性
 *输入描述: 目标IP,存活时间,探测间隔时间(ms),探测超时时间(ms),用户数据字节长度,设备网络ID,严格验证标志,报文分析标志
 *输出描述: NONE
 *返回描述: 成功(True)/失败(False)
 *作者日期: ZCQ/2007/09/06
 *全局声明: NONE
 *特殊说明: 同步验证
 ************************************************************************************************************************************************************************       
*/
extern Boolean ZFY_NET_IcmpPing(U32 DestIP,int TTL,U32 Interval,U32 TimeOut,U32 Len,U32 DevNetID,Boolean bStrick,Boolean bIsAnalyze);

/*
 ************************************************************************************************************************************************************************     
 *函数名称: ZFY_NET_SntpStart
 *功能描述: 简单网络时间协议服务启动
 *输入描述: 时间设置回调函数、简单网络时间协议服务器地址与端口、时间校对周期(s)、第二服务器地址
 *输出描述: 无
 *返回描述: 成功(TRUE)/失败(FALSE)
 *作者日期: ZCQ/2007/11/14
 *全局声明: SntpServer,sSntpServerMutex
 *特殊说明: 自动创建简单网络时间协议客户端代理进程
 ************************************************************************************************************************************************************************       
 */
extern BOOL ZFY_NET_SntpStart(PLOCAL_TIME_SET_FUNC pTimeSet,U32 ServerIP,U16 ServerPort,U16 PollTimer,U32 SecondServerIP);

/*
 ************************************************************************************************************************************************************************     
 *函数名称: ZFY_NET_SntpStop
 *功能描述: 简单网络时间协议服务停止
 *输入描述: 无
 *输出描述: 无
 *返回描述: 无
 *作者日期: ZCQ/2007/07/17
 *全局声明: SntpServer,sSntpServerMutex
 *特殊说明: 销毁简单网络时间协议客户端代理进程
 ************************************************************************************************************************************************************************       
 */
extern void ZFY_NET_SntpStop(void);



/*
 ************************************************************************************************************************************************************************
 * 全局变量输出声明
 ************************************************************************************************************************************************************************
*/


#ifdef	__cplusplus
#if		__cplusplus
}
#endif
#endif

/******************************************NetServer.h 文件结束******************************************************************************************************/
#endif
